# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

#######################################################################
# gaul/examples/Makefile.am
#######################################################################
#
# GAUL - Genetic Algorithm Utility library.
# Copyright Â©2000-2002, Stewart Adcock <stewart@linux-domain.com>
#
# The latest version of this program should be available at:
# http://www.stewart-adcock.co.uk/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  Alternatively, if your project
# is incompatible with the GPL, I will probably agree to requests
# for permission to use the terms of any other license.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY WHATSOEVER.
#
# A full copy of the GNU General Public License should be in the file
# "COPYING" provided with this distribution; if not, see:
# http://www.gnu.org/
#
#######################################################################

# require automake 1.4


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@
AS = @AS@
CC = @CC@
DLLTOOL = @DLLTOOL@
ECHO = @ECHO@
EXEEXT = @EXEEXT@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
LT_CURRENT = @LT_CURRENT@
LT_RELEASE = @LT_RELEASE@
LT_REVISION = @LT_REVISION@
MAINT = @MAINT@
MAJOR_VERSION = @MAJOR_VERSION@
MAKEINFO = @MAKEINFO@
MINOR_VERSION = @MINOR_VERSION@
MPICC = @MPICC@
MPIFLAGS = @MPIFLAGS@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PATCH_VERSION = @PATCH_VERSION@
RANLIB = @RANLIB@
STRIP = @STRIP@
VERSION = @VERSION@

AUTOMAKE_OPTIONS = 1.4

#EXTRA_PROGRAMS = 

bin_PROGRAMS = diagnostics \
	pingpong pingpong_tabu pingpong_tabu2 pingpong_sa \
	wildfire wildfire_forked wildfire_loadbalancing \
	goldberg1 goldberg2 \
	royalroad royalroad_ss \
	struggle struggle_randomsearch struggle_forked \
        struggle2 struggle3 struggle4 struggle5 struggle5_mp struggle5_forked struggle_ss \
	saveload \
	nnevolve


diagnostics_SOURCES = diagnostics.c
pingpong_SOURCES = pingpong.c
pingpong_tabu_SOURCES = pingpong_tabu.c
pingpong_tabu2_SOURCES = pingpong_tabu2.c
pingpong_sa_SOURCES = pingpong_sa.c
wildfire_SOURCES = wildfire.c
wildfire_forked_SOURCES = wildfire_forked.c
wildfire_loadbalancing_SOURCES = wildfire_loadbalancing.c
goldberg1_SOURCES = goldberg1.c
goldberg2_SOURCES = goldberg2.c
royalroad_SOURCES = royalroad.c
royalroad_ss_SOURCES = royalroad_ss.c
struggle_SOURCES = struggle.c
struggle_randomsearch_SOURCES = struggle_randomsearch.c
struggle_forked_SOURCES = struggle_forked.c
struggle2_SOURCES = struggle2.c
struggle3_SOURCES = struggle3.c
struggle4_SOURCES = struggle4.c
struggle5_SOURCES = struggle5.c
struggle5_forked_SOURCES = struggle5_forked.c
struggle5_mp_SOURCES = struggle5_mp.c
struggle_ss_SOURCES = struggle_ss.c
saveload_SOURCES = saveload.c
nnevolve_SOURCES = nnevolve.c

noinst_LTLIBRARIES = libbtree.la

libbtree_la_SOURCES = btree.c

# Kludge to force compilation of the binaries.
libbtree_la_DEPENDENCIES = ${EXTRA_PROGRAMS}

noinst_HEADERS = \
	btree.h goldberg1.h goldberg2.h pingpong.h wildfire.h


EXTRA_DIST = \
	chromostubs.c \
	chromostubs.h \
	wine.data wine.names


diagnostics_DEPENDENCIES = ${DEPENDENCIES}
pingpong_DEPENDENCIES = ${DEPENDENCIES}
pingpong_tabu_DEPENDENCIES = ${DEPENDENCIES}
pingpong_tabu2_DEPENDENCIES = ${DEPENDENCIES}
pingpong_sa_DEPENDENCIES = ${DEPENDENCIES}
wildfire_DEPENDENCIES = ${DEPENDENCIES}
wildfire_forked_DEPENDENCIES = ${DEPENDENCIES}
wildfire_loadbalancing_DEPENDENCIES = ${DEPENDENCIES}
goldberg1_DEPENDENCIES = ${DEPENDENCIES}
goldberg2_DEPENDENCIES = ${DEPENDENCIES}
royalroad_DEPENDENCIES = ${DEPENDENCIES}
royalroad_ss_DEPENDENCIES = ${DEPENDENCIES}
struggle_DEPENDENCIES = ${DEPENDENCIES}
struggle_randomsearch_DEPENDENCIES = ${DEPENDENCIES}
struggle_forked_DEPENDENCIES = ${DEPENDENCIES}
struggle2_DEPENDENCIES = ${DEPENDENCIES}
struggle3_DEPENDENCIES = ${DEPENDENCIES}
struggle4_DEPENDENCIES = ${DEPENDENCIES}
struggle5_DEPENDENCIES = ${DEPENDENCIES}
struggle5_forked_DEPENDENCIES = ${DEPENDENCIES}
struggle5_mp_DEPENDENCIES = ${DEPENDENCIES}
struggle_ss_DEPENDENCIES = ${DEPENDENCIES}
saveload_DEPENDENCIES = ${DEPENDENCIES}
nnevolve_DEPENDENCIES = ${DEPENDENCIES}

# Serial code:
diagnostics_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
pingpong_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
pingpong_tabu_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
pingpong_tabu2_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
pingpong_sa_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
wildfire_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
wildfire_forked_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
wildfire_loadbalancing_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
goldberg1_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm 
goldberg2_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
royalroad_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
royalroad_ss_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle_randomsearch_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle_forked_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle2_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle3_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle4_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle5_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle5_forked_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
struggle_ss_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm
saveload_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lstuff -lm 
nnevolve_LDADD = -L../src/ -L../util/ -lgaul -llog_util -lmpi_util_fake -lnn_util -lstuff -lm 

# Parallel code:
struggle5_mp_LDADD = -L../src/ -L../util/ -lgaul -llog_util_parallel -lmpi_util -lstuff -lm
struggle5_mp_LINK = @MPICC@ $(struggle5_mp_LDADD) -o struggle5_mp @MPIFLAGS@
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
LTLIBRARIES =  $(noinst_LTLIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libbtree_la_LDFLAGS = 
libbtree_la_LIBADD = 
libbtree_la_OBJECTS =  btree.lo
bin_PROGRAMS =  diagnostics$(EXEEXT) pingpong$(EXEEXT) \
pingpong_tabu$(EXEEXT) pingpong_tabu2$(EXEEXT) pingpong_sa$(EXEEXT) \
wildfire$(EXEEXT) wildfire_forked$(EXEEXT) \
wildfire_loadbalancing$(EXEEXT) goldberg1$(EXEEXT) goldberg2$(EXEEXT) \
royalroad$(EXEEXT) royalroad_ss$(EXEEXT) struggle$(EXEEXT) \
struggle_randomsearch$(EXEEXT) struggle_forked$(EXEEXT) \
struggle2$(EXEEXT) struggle3$(EXEEXT) struggle4$(EXEEXT) \
struggle5$(EXEEXT) struggle5_mp$(EXEEXT) struggle5_forked$(EXEEXT) \
struggle_ss$(EXEEXT) saveload$(EXEEXT) nnevolve$(EXEEXT)
PROGRAMS =  $(bin_PROGRAMS)

diagnostics_OBJECTS =  diagnostics.$(OBJEXT)
diagnostics_LDFLAGS = 
pingpong_OBJECTS =  pingpong.$(OBJEXT)
pingpong_LDFLAGS = 
pingpong_tabu_OBJECTS =  pingpong_tabu.$(OBJEXT)
pingpong_tabu_LDFLAGS = 
pingpong_tabu2_OBJECTS =  pingpong_tabu2.$(OBJEXT)
pingpong_tabu2_LDFLAGS = 
pingpong_sa_OBJECTS =  pingpong_sa.$(OBJEXT)
pingpong_sa_LDFLAGS = 
wildfire_OBJECTS =  wildfire.$(OBJEXT)
wildfire_LDFLAGS = 
wildfire_forked_OBJECTS =  wildfire_forked.$(OBJEXT)
wildfire_forked_LDFLAGS = 
wildfire_loadbalancing_OBJECTS =  wildfire_loadbalancing.$(OBJEXT)
wildfire_loadbalancing_LDFLAGS = 
goldberg1_OBJECTS =  goldberg1.$(OBJEXT)
goldberg1_LDFLAGS = 
goldberg2_OBJECTS =  goldberg2.$(OBJEXT)
goldberg2_LDFLAGS = 
royalroad_OBJECTS =  royalroad.$(OBJEXT)
royalroad_LDFLAGS = 
royalroad_ss_OBJECTS =  royalroad_ss.$(OBJEXT)
royalroad_ss_LDFLAGS = 
struggle_OBJECTS =  struggle.$(OBJEXT)
struggle_LDFLAGS = 
struggle_randomsearch_OBJECTS =  struggle_randomsearch.$(OBJEXT)
struggle_randomsearch_LDFLAGS = 
struggle_forked_OBJECTS =  struggle_forked.$(OBJEXT)
struggle_forked_LDFLAGS = 
struggle2_OBJECTS =  struggle2.$(OBJEXT)
struggle2_LDFLAGS = 
struggle3_OBJECTS =  struggle3.$(OBJEXT)
struggle3_LDFLAGS = 
struggle4_OBJECTS =  struggle4.$(OBJEXT)
struggle4_LDFLAGS = 
struggle5_OBJECTS =  struggle5.$(OBJEXT)
struggle5_LDFLAGS = 
struggle5_mp_OBJECTS =  struggle5_mp.$(OBJEXT)
struggle5_mp_LDFLAGS = 
struggle5_forked_OBJECTS =  struggle5_forked.$(OBJEXT)
struggle5_forked_LDFLAGS = 
struggle_ss_OBJECTS =  struggle_ss.$(OBJEXT)
struggle_ss_LDFLAGS = 
saveload_OBJECTS =  saveload.$(OBJEXT)
saveload_LDFLAGS = 
nnevolve_OBJECTS =  nnevolve.$(OBJEXT)
nnevolve_LDFLAGS = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(noinst_HEADERS)

DIST_COMMON =  README Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
DEP_FILES =  .deps/btree.P .deps/diagnostics.P .deps/goldberg1.P \
.deps/goldberg2.P .deps/nnevolve.P .deps/pingpong.P .deps/pingpong_sa.P \
.deps/pingpong_tabu.P .deps/pingpong_tabu2.P .deps/royalroad.P \
.deps/royalroad_ss.P .deps/saveload.P .deps/struggle.P \
.deps/struggle2.P .deps/struggle3.P .deps/struggle4.P .deps/struggle5.P \
.deps/struggle5_forked.P .deps/struggle5_mp.P .deps/struggle_forked.P \
.deps/struggle_randomsearch.P .deps/struggle_ss.P .deps/wildfire.P \
.deps/wildfire_forked.P .deps/wildfire_loadbalancing.P
SOURCES = $(libbtree_la_SOURCES) $(diagnostics_SOURCES) $(pingpong_SOURCES) $(pingpong_tabu_SOURCES) $(pingpong_tabu2_SOURCES) $(pingpong_sa_SOURCES) $(wildfire_SOURCES) $(wildfire_forked_SOURCES) $(wildfire_loadbalancing_SOURCES) $(goldberg1_SOURCES) $(goldberg2_SOURCES) $(royalroad_SOURCES) $(royalroad_ss_SOURCES) $(struggle_SOURCES) $(struggle_randomsearch_SOURCES) $(struggle_forked_SOURCES) $(struggle2_SOURCES) $(struggle3_SOURCES) $(struggle4_SOURCES) $(struggle5_SOURCES) $(struggle5_mp_SOURCES) $(struggle5_forked_SOURCES) $(struggle_ss_SOURCES) $(saveload_SOURCES) $(nnevolve_SOURCES)
OBJECTS = $(libbtree_la_OBJECTS) $(diagnostics_OBJECTS) $(pingpong_OBJECTS) $(pingpong_tabu_OBJECTS) $(pingpong_tabu2_OBJECTS) $(pingpong_sa_OBJECTS) $(wildfire_OBJECTS) $(wildfire_forked_OBJECTS) $(wildfire_loadbalancing_OBJECTS) $(goldberg1_OBJECTS) $(goldberg2_OBJECTS) $(royalroad_OBJECTS) $(royalroad_ss_OBJECTS) $(struggle_OBJECTS) $(struggle_randomsearch_OBJECTS) $(struggle_forked_OBJECTS) $(struggle2_OBJECTS) $(struggle3_OBJECTS) $(struggle4_OBJECTS) $(struggle5_OBJECTS) $(struggle5_mp_OBJECTS) $(struggle5_forked_OBJECTS) $(struggle_ss_OBJECTS) $(saveload_OBJECTS) $(nnevolve_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu examples/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-noinstLTLIBRARIES:

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)

distclean-noinstLTLIBRARIES:

maintainer-clean-noinstLTLIBRARIES:

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

libbtree.la: $(libbtree_la_OBJECTS) $(libbtree_la_DEPENDENCIES)
	$(LINK)  $(libbtree_la_LDFLAGS) $(libbtree_la_OBJECTS) $(libbtree_la_LIBADD) $(LIBS)

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

diagnostics$(EXEEXT): $(diagnostics_OBJECTS) $(diagnostics_DEPENDENCIES)
	@rm -f diagnostics$(EXEEXT)
	$(LINK) $(diagnostics_LDFLAGS) $(diagnostics_OBJECTS) $(diagnostics_LDADD) $(LIBS)

pingpong$(EXEEXT): $(pingpong_OBJECTS) $(pingpong_DEPENDENCIES)
	@rm -f pingpong$(EXEEXT)
	$(LINK) $(pingpong_LDFLAGS) $(pingpong_OBJECTS) $(pingpong_LDADD) $(LIBS)

pingpong_tabu$(EXEEXT): $(pingpong_tabu_OBJECTS) $(pingpong_tabu_DEPENDENCIES)
	@rm -f pingpong_tabu$(EXEEXT)
	$(LINK) $(pingpong_tabu_LDFLAGS) $(pingpong_tabu_OBJECTS) $(pingpong_tabu_LDADD) $(LIBS)

pingpong_tabu2$(EXEEXT): $(pingpong_tabu2_OBJECTS) $(pingpong_tabu2_DEPENDENCIES)
	@rm -f pingpong_tabu2$(EXEEXT)
	$(LINK) $(pingpong_tabu2_LDFLAGS) $(pingpong_tabu2_OBJECTS) $(pingpong_tabu2_LDADD) $(LIBS)

pingpong_sa$(EXEEXT): $(pingpong_sa_OBJECTS) $(pingpong_sa_DEPENDENCIES)
	@rm -f pingpong_sa$(EXEEXT)
	$(LINK) $(pingpong_sa_LDFLAGS) $(pingpong_sa_OBJECTS) $(pingpong_sa_LDADD) $(LIBS)

wildfire$(EXEEXT): $(wildfire_OBJECTS) $(wildfire_DEPENDENCIES)
	@rm -f wildfire$(EXEEXT)
	$(LINK) $(wildfire_LDFLAGS) $(wildfire_OBJECTS) $(wildfire_LDADD) $(LIBS)

wildfire_forked$(EXEEXT): $(wildfire_forked_OBJECTS) $(wildfire_forked_DEPENDENCIES)
	@rm -f wildfire_forked$(EXEEXT)
	$(LINK) $(wildfire_forked_LDFLAGS) $(wildfire_forked_OBJECTS) $(wildfire_forked_LDADD) $(LIBS)

wildfire_loadbalancing$(EXEEXT): $(wildfire_loadbalancing_OBJECTS) $(wildfire_loadbalancing_DEPENDENCIES)
	@rm -f wildfire_loadbalancing$(EXEEXT)
	$(LINK) $(wildfire_loadbalancing_LDFLAGS) $(wildfire_loadbalancing_OBJECTS) $(wildfire_loadbalancing_LDADD) $(LIBS)

goldberg1$(EXEEXT): $(goldberg1_OBJECTS) $(goldberg1_DEPENDENCIES)
	@rm -f goldberg1$(EXEEXT)
	$(LINK) $(goldberg1_LDFLAGS) $(goldberg1_OBJECTS) $(goldberg1_LDADD) $(LIBS)

goldberg2$(EXEEXT): $(goldberg2_OBJECTS) $(goldberg2_DEPENDENCIES)
	@rm -f goldberg2$(EXEEXT)
	$(LINK) $(goldberg2_LDFLAGS) $(goldberg2_OBJECTS) $(goldberg2_LDADD) $(LIBS)

royalroad$(EXEEXT): $(royalroad_OBJECTS) $(royalroad_DEPENDENCIES)
	@rm -f royalroad$(EXEEXT)
	$(LINK) $(royalroad_LDFLAGS) $(royalroad_OBJECTS) $(royalroad_LDADD) $(LIBS)

royalroad_ss$(EXEEXT): $(royalroad_ss_OBJECTS) $(royalroad_ss_DEPENDENCIES)
	@rm -f royalroad_ss$(EXEEXT)
	$(LINK) $(royalroad_ss_LDFLAGS) $(royalroad_ss_OBJECTS) $(royalroad_ss_LDADD) $(LIBS)

struggle$(EXEEXT): $(struggle_OBJECTS) $(struggle_DEPENDENCIES)
	@rm -f struggle$(EXEEXT)
	$(LINK) $(struggle_LDFLAGS) $(struggle_OBJECTS) $(struggle_LDADD) $(LIBS)

struggle_randomsearch$(EXEEXT): $(struggle_randomsearch_OBJECTS) $(struggle_randomsearch_DEPENDENCIES)
	@rm -f struggle_randomsearch$(EXEEXT)
	$(LINK) $(struggle_randomsearch_LDFLAGS) $(struggle_randomsearch_OBJECTS) $(struggle_randomsearch_LDADD) $(LIBS)

struggle_forked$(EXEEXT): $(struggle_forked_OBJECTS) $(struggle_forked_DEPENDENCIES)
	@rm -f struggle_forked$(EXEEXT)
	$(LINK) $(struggle_forked_LDFLAGS) $(struggle_forked_OBJECTS) $(struggle_forked_LDADD) $(LIBS)

struggle2$(EXEEXT): $(struggle2_OBJECTS) $(struggle2_DEPENDENCIES)
	@rm -f struggle2$(EXEEXT)
	$(LINK) $(struggle2_LDFLAGS) $(struggle2_OBJECTS) $(struggle2_LDADD) $(LIBS)

struggle3$(EXEEXT): $(struggle3_OBJECTS) $(struggle3_DEPENDENCIES)
	@rm -f struggle3$(EXEEXT)
	$(LINK) $(struggle3_LDFLAGS) $(struggle3_OBJECTS) $(struggle3_LDADD) $(LIBS)

struggle4$(EXEEXT): $(struggle4_OBJECTS) $(struggle4_DEPENDENCIES)
	@rm -f struggle4$(EXEEXT)
	$(LINK) $(struggle4_LDFLAGS) $(struggle4_OBJECTS) $(struggle4_LDADD) $(LIBS)

struggle5$(EXEEXT): $(struggle5_OBJECTS) $(struggle5_DEPENDENCIES)
	@rm -f struggle5$(EXEEXT)
	$(LINK) $(struggle5_LDFLAGS) $(struggle5_OBJECTS) $(struggle5_LDADD) $(LIBS)

struggle5_mp$(EXEEXT): $(struggle5_mp_OBJECTS) $(struggle5_mp_DEPENDENCIES)
	@rm -f struggle5_mp$(EXEEXT)
	$(struggle5_mp_LINK) $(struggle5_mp_LDFLAGS) $(struggle5_mp_OBJECTS) $(struggle5_mp_LDADD) $(LIBS)

struggle5_forked$(EXEEXT): $(struggle5_forked_OBJECTS) $(struggle5_forked_DEPENDENCIES)
	@rm -f struggle5_forked$(EXEEXT)
	$(LINK) $(struggle5_forked_LDFLAGS) $(struggle5_forked_OBJECTS) $(struggle5_forked_LDADD) $(LIBS)

struggle_ss$(EXEEXT): $(struggle_ss_OBJECTS) $(struggle_ss_DEPENDENCIES)
	@rm -f struggle_ss$(EXEEXT)
	$(LINK) $(struggle_ss_LDFLAGS) $(struggle_ss_OBJECTS) $(struggle_ss_LDADD) $(LIBS)

saveload$(EXEEXT): $(saveload_OBJECTS) $(saveload_DEPENDENCIES)
	@rm -f saveload$(EXEEXT)
	$(LINK) $(saveload_LDFLAGS) $(saveload_OBJECTS) $(saveload_LDADD) $(LIBS)

nnevolve$(EXEEXT): $(nnevolve_OBJECTS) $(nnevolve_DEPENDENCIES)
	@rm -f nnevolve$(EXEEXT)
	$(LINK) $(nnevolve_LDFLAGS) $(nnevolve_OBJECTS) $(nnevolve_LDADD) $(LIBS)

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = examples

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu examples/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-binPROGRAMS
install-exec: install-exec-am

install-data-am:
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-binPROGRAMS
uninstall: uninstall-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(bindir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-noinstLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-binPROGRAMS \
		mostlyclean-tags mostlyclean-depend mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-noinstLTLIBRARIES clean-compile clean-libtool \
		clean-binPROGRAMS clean-tags clean-depend clean-generic \
		mostlyclean-am

clean: clean-am

distclean-am:  distclean-noinstLTLIBRARIES distclean-compile \
		distclean-libtool distclean-binPROGRAMS distclean-tags \
		distclean-depend distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-noinstLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-binPROGRAMS maintainer-clean-tags \
		maintainer-clean-depend maintainer-clean-generic \
		distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-noinstLTLIBRARIES distclean-noinstLTLIBRARIES \
clean-noinstLTLIBRARIES maintainer-clean-noinstLTLIBRARIES \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool mostlyclean-binPROGRAMS \
distclean-binPROGRAMS clean-binPROGRAMS maintainer-clean-binPROGRAMS \
uninstall-binPROGRAMS install-binPROGRAMS tags mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir \
mostlyclean-depend distclean-depend clean-depend \
maintainer-clean-depend info-am info dvi-am dvi check check-am \
installcheck-am installcheck install-exec-am install-exec \
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
