dnl ***************************************************************
dnl gaul/configure.in
dnl ***************************************************************
dnl
dnl GAUL - Genetic Algorithm Utility Library.
dnl Copyright ©2001-2002, Stewart Adcock <stewart@linux-domain.com>
dnl
dnl The latest version of this program should be available at:
dnl http://www.stewart-adcock.co.uk/
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.  Alternatively, if your project
dnl is incompatible with the GPL, I will probably agree to requests
dnl for permission to use the terms of any other license.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY WHATSOEVER.
dnl
dnl A full copy of the GNU General Public License should be in the file
dnl "COPYING" provided with this distribution; if not, see:
dnl http://www.gnu.org/
dnl
dnl ***************************************************************
dnl
dnl To do:	MPI/PVM/thread checks and configuration.
dnl
dnl ***************************************************************

dnl We require autoconf 2.13 or above
AC_PREREQ(2.13)

dnl init autoconf (and check for presence of gaul.h - the public header file)
AC_INIT(src/gaul.h)

PACKAGE=gaul-devel

AC_CANONICAL_SYSTEM

dnl we need to AC_DIVERT_PUSH/AC_DIVERT_POP these variable definitions so they
dnl are available for $ac_help expansion.
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
MAJOR_VERSION=0
MINOR_VERSION=1838
PATCH_VERSION=2
VERSION=$MAJOR_VERSION.$MINOR_VERSION-$PATCH_VERSION
#AC_DIVERT_POP()

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(PATCH_VERSION)
AC_SUBST(VERSION)
AC_SUBST(MPICC)
AC_SUBST(MPIFLAGS)

# libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=0
LT_REVISION=$PATCH_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION, [Major version number])
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION, [Minor version number])
AC_DEFINE_UNQUOTED(PATCH_VERSION, $PATCH_VERSION, [Patch count])

dnl Set some defines required to their default values.
dnl FIXME: allow configuration-time modification.
AC_DEFINE(V3_QUICK, 1, [Define to skip error checking in vector routines])
AC_DEFINE(AVLTREE_KEY_TYPE, void *, [Type of key used by AVL routines])
AC_DEFINE_UNQUOTED(BUILD_DATE_STRING, "`date +%d/%m/%y`", [Date of compilation])
AC_DEFINE_UNQUOTED(VERSION_STRING, "${VERSION}", [Version string])
AC_DEFINE(MPI_NUM_THREADS_ENVVAR_STRING, "GA_NUM_THREADS", [Environment variable used to request threads])
AC_DEFINE_UNQUOTED(UNAME_STRING, "`uname -a`", [System information])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

dnl Initialize libtool with module loading capability.
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

#dnl figure debugging default, prior to $ac_help setup
#dnl
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
#if test `expr $MINOR_VERSION \% 2` = 1 ; then
#	debug_default=yes
#else
#	debug_default=partial
#fi
#AC_DIVERT_POP()
dnl Debugging default.
debug_default=no

dnl declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(debug,
       [  --enable-debug=[no/minimum/yes] turn on debugging [default=$debug_default]],,
       enable_debug=$debug_default)
AC_ARG_ENABLE(memory_debug,
       [  --enable-memory-debug           turn on memory access debugging [default=no]],,
       enable_memory_debug=no)
AC_ARG_ENABLE(ansi,
       [  --enable-ansi                   turn on strict ansi [default=no]],,
       enable_ansi=no)
AC_ARG_ENABLE(missing_prototypes,
       [  --enable-missing-prototypes     turn on missing prototype checks [default=no]],,
       enable_missing_prototypes=no)
AC_ARG_ENABLE(threads,
       [  --enable-threads                turn on multi-thread support [default=no]
                          ([=no] will override --with-threads)],,
       enable_threads=no)
AC_ARG_ENABLE(mpi,
       [  --enable-mpi                    turn on MPI support [default=no]
                          ([=no] will override --with-mpi)],,
       enable_mpi=no)
AC_ARG_ENABLE(pvm,
       [  --enable-pvm                    turn on PVM3 support [default=no]
                          ([=no] will override --with-pvm)],,
       enable_pvm=no)
AC_ARG_ENABLE(slang,
       [  --enable-slang=[yes/no]         use S-Lang for scripting [default=yes]],,
       enable_slang=yes)
AC_ARG_ENABLE(prof,
       [  --enable-profile                turn on profiling [default=no]],,
       enable_prof=no)
AC_ARG_ENABLE(efence,
       [  --enable-efence=[yes/no]        use Electric Fence for memory debugging [default=no]],,
       enable_efence=no)
AC_ARG_ENABLE(padding,
       [  --enable-padding=[yes/no]       use memory padding for overflow detection [default=no]],,
       enable_padding=no)

AC_MSG_CHECKING(for type of parallisation)
AC_DEFINE(PARALLEL, 0, [type of parallisation])

if test "x$enable_threads" != "xyes"; then
  enable_threads=no
else
  AC_DEFINE(PARALLEL, 1)
  AC_MSG_RESULT(pthreads)
fi

if test "x$enable_mpi" != "xyes"; then
  enable_mpi=no
else
  AC_DEFINE(PARALLEL, 2)
  AC_MSG_RESULT(MPI)
fi

if test "x$enable_pvm" != "xyes"; then
  enable_pvm=no
else
  AC_DEFINE(PARALLEL, 3)
  AC_MSG_RESULT(PVM3)
fi

if test "x$enable_threads" = "xno"; then
  if test "x$enable_mpi" = "xno"; then
    if test "x$enable_pvm" = "xno"; then
      AC_MSG_RESULT(none)
    fi
  fi
fi

AC_MSG_CHECKING(whether to enable memory access debugging)
if test "x$enable_memory_debug" = "xyes"; then
  AC_DEFINE(MEMORY_ALLOC_DEBUG, 1)
  AC_MSG_RESULT(yes - full profiling)
else
  AC_DEFINE(MEMORY_ALLOC_SAFE, 1)
  AC_MSG_RESULT(no - safe wrappers only)
fi

AC_MSG_CHECKING(whether to enable dumping of statistics)
if test "x$enable_stats" = "xyes"; then
  AC_DEFINE(GA_WRITE_STATS,1)
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(GA_WRITE_STATS,0)
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable general GAUL debugging)
if test "x$enable_debug" = "xyes"; then
  AC_DEFINE(GA_DEBUG,2)
  AC_DEFINE(DEBUG,2)
  AC_MSG_RESULT(yes)
  debug=2
else
  if test "x$enable_debug" = "xno"; then
    AC_DEFINE(GA_DEBUG,0)
    AC_DEFINE(DEBUG,0)
    AC_MSG_RESULT(no)
    debug=0
  else
    AC_DEFINE(GA_DEBUG,1)
    AC_DEFINE(DEBUG,1)
    AC_MSG_RESULT(partial)
    debug=1
  fi
fi

AC_MSG_CHECKING(whether to enable run-time profiling)
if test "x$enable_prof" = "xyes"; then
  CFLAGS="$CFLAGS -pg"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl Whether to pad memory to detect overflows
AC_MSG_CHECKING(whether to pad memory to detect overflows)
if test "x$enable_padding" = "xyes"; then
  AC_DEFINE(MEMORY_PADDING,1)
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(MEMORY_PADDING,0)
  AC_MSG_RESULT(no)
fi

#dnl Check for MPI versions.
#dnl FIXME: Need to think about how to handle MPI sensibly.  This
#dnl is currently nothing more than a kludge!
## For LAM on chemcca0 / desktop.
#MPIFLAGS="-llammpi++ -llammpio -lpmpi -llamf77mpi -lmpi -llam -lnsl -lutil"
## For MPICH on chemcca40.
##MPIFLAGS="-DUSE_STDARG -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_UNISTD_H=1 -DHAVE_STDARG_H=1 -DUSE_STDARG=1 -DMALLOC_RET_VOID=1 -L/usr/share/mpi/lib -lmpich"
## For non-MPI machines.
##MPIFLAGS=""

dnl Setup MPI compilation
AC_MSG_CHECKING(how to compile MPI code)
if test "x$enable_mpi" = "xyes"; then
  MPICC="mpicc"
  MPIFLAGS=""
  AC_MSG_RESULT(mpicc)
else
  MPICC="echo"
  MPIFLAGS="> /dev/null"
  AC_MSG_RESULT(skip)
fi

dnl Electric Fence has to be last library linked.
AC_MSG_CHECKING(whether to link Electric Fence for memory debugging)
if test "x$enable_efence" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_CHECK_LIB(efence, malloc, LIBS="$LIBS -lefence")
else
  AC_MSG_RESULT(no)
fi

# Check for S-Lang.
AC_MSG_CHECKING(whether to link S-Lang scripting engine)
if test "x$enable_slang" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_SLANG,1)
  WILL_USE_SLANG="yes"
  LIBS="$LIBS -lslang"
  INCLUDES="$INCLUDES -I/usr/include/slang/"
  CFLAGS="$CFLAGS -I/usr/include/slang/" # FIXME: Kludge!
  AC_CHECK_LIB(slang, SLang_init_slang,
    [LIBS="$LIBS -lslang"
     INCLUDES="$INCLUDES -I/usr/include/slang/"],
    [AC_MSG_ERROR(GAUL requires the S-Lang library for full functionality.  see http://space.mit.edu/pub/davis/slang/  Or configure with '--enable-slang=no' for reduced version.)])
else
  AC_MSG_RESULT(no)
  AC_DEFINE(HAVE_SLANG,0)
  WILL_USE_SLANG="no"
fi

changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall -O2 -g" ;;
  esac

  if test "x$enable_missing_prototypes" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-Wmissing-prototypes[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -Wmissing-prototypes" ;;
    esac
  fi

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-ansi[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[\ \	]-pedantic[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
fi
changequote([,])dnl

dnl Checks for standard library functions.
AC_FUNC_VPRINTF

AC_CHECK_FUNCS(atexit on_exit)

dnl Check type sizes.
AC_CHECK_SIZEOF(double, 4)
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(void *, 4)

dnl Stuff.
AC_C_CONST
AC_STRUCT_TM

dnl Determine memory alignment characteristics.
AC_MSG_CHECKING(memory alignment)
AC_CACHE_VAL(MEMORY_ALIGN_SIZE,
[AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
int main(void)
  {
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", (unsigned int) sizeof(long)>sizeof(void *)?sizeof(long):sizeof(void *));
  exit(0);
  }
], MEMORY_ALIGN_SIZE=`cat conftestval`, MEMORY_ALIGN_SIZE=0, MEMORY_ALIGN_SIZE=8)])
AC_MSG_RESULT($MEMORY_ALIGN_SIZE)
AC_DEFINE_UNQUOTED(MEMORY_ALIGN_SIZE, $MEMORY_ALIGN_SIZE)
# undefine([MEMORY_ALIGN_SIZE])

dnl Get includes setup correctly.
INCLUDES="$INCLUDES -I../util/"
CFLAGS="$CFLAGS -I../util/ -I../src/" # FIXME: Kludge!

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(arpa/inet.h netdb.h netinet/in.h pwd.h sys/ioctl.h \
                 sys/select.h sys/signal.h sys/socket.h sys/termio.h \
                 sys/time.h sys/types.h sys/uio.h \
                 limits.h values.h termios.h unistd.h fcntl.h)

dnl Check for some ilibrary functions, many of which GAUL doesn't use, but I
dnl haven't gone though checking yet.
AC_CHECK_FUNCS( fdopen gethostname getpwuid gettimeofday select \
                waitpid usleep snooze \
                basename \
                readline \
                memcpy memset memmove bcopy memscan \
                memrev memchr memmem memcmp \
                min max \
                sincos \
                index rindex \
                strchr strrchr strcat strlen \
                strcmp strncmp strcpy strncpy strtok strpbrk strsep \
		stricmp strnicmp \
                strcasecmp strncasecmp snprintf \
                strdup strndup \
		strnfill strcatv strtod strsignal strrev \
                strspn strcspn \
                strerror strlcat strlcpy strstr vsnprintf )
AC_DEFINE(HAVE_ITOA,1)	# Kludge to avoid symbol conflict with LAM-MPI

dnl Give warning if GNU Make is not being used.
dnl This message is at the bottom so it may be easily spotted!
temp=`make -version -f \dev\null 2>&1 | grep GNU`
if test "x$temp" = "x"; then
  AC_MSG_WARN([You are advised to use GNU Make when compiling GAUL])
fi

AC_OUTPUT(
           Makefile
           util/Makefile
           src/Makefile
           tests/Makefile
           examples/Makefile
         )

echo \
"************************************************************************
  GAUL has been configured successfully.  In summary:

  Version:                    ${VERSION}
  Source code location:       ${srcdir}
  Host System Type:           ${host}
  Debugging level:            ${debug}
  C compiler:                 ${CC}
  C compiler flags:           ${CFLAGS}
  Additional include flags:   ${INCLUDE}
  Install path:               ${prefix}
  Use S-Lang:                 ${WILL_USE_SLANG}

************************************************************************"

