dnl ***************************************************************
dnl gaul/configure.in
dnl ***************************************************************
dnl
dnl GAUL - Genetic Algorithm Utility Library.
dnl Copyright Â©2001-2002, Stewart Adcock <stewart@linux-domain.com>
dnl
dnl The latest version of this program should be available at:
dnl http://www.stewart-adcock.co.uk/
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.  Alternatively, if your project
dnl is incompatible with the GPL, I will probably agree to requests
dnl for permission to use the terms of any other license.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY WHATSOEVER.
dnl
dnl A full copy of the GNU General Public License should be in the file
dnl "COPYING" provided with this distribution; if not, see:
dnl http://www.gnu.org/
dnl
dnl ***************************************************************
dnl
dnl To do:	MPI/PVM/thread checks and configuration.
dnl		Consider use of AC_TRY_CFLAGS().
dnl
dnl ***************************************************************

dnl We require autoconf 2.13 or above
AC_PREREQ(2.13)

dnl init autoconf (and check for presence of gaul.h - the public header file)
AC_INIT(src/gaul.h)

PACKAGE=gaul-devel

AC_CANONICAL_SYSTEM

dnl we need to AC_DIVERT_PUSH/AC_DIVERT_POP these variable definitions so they
dnl are available for $ac_help expansion.
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
MAJOR_VERSION=0
MINOR_VERSION=1841
PATCH_VERSION=5
VERSION=$MAJOR_VERSION.$MINOR_VERSION-$PATCH_VERSION
#AC_DIVERT_POP()

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(PATCH_VERSION)
AC_SUBST(VERSION)
AC_SUBST(MPICC)
AC_SUBST(MPIFLAGS)

# libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=0
LT_REVISION=$PATCH_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION, [Major version number.])
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION, [Minor version number.])
AC_DEFINE_UNQUOTED(PATCH_VERSION, $PATCH_VERSION, [Patch level.])

dnl Set some defines required to their default values.
dnl FIXME: allow configuration-time modification for many of these.
AC_DEFINE_UNQUOTED(UNAME_STRING, "`uname -a`", [Record compilation platform information.])
AC_DEFINE_UNQUOTED(BUILD_DATE_STRING, "`date +%d/%m/%y`", [Record date of compilation.])
AC_DEFINE(V3_QUICK, 1, [Whether to skip expensive sanity checking in vector routines.])
AC_DEFINE(AVLTREE_KEY_TYPE, void *, [Type of key used by AVL tree routines.])
AC_DEFINE_UNQUOTED(VERSION_STRING, "${VERSION}", [Version string.])

AC_DEFINE(GA_NUM_PROCESSES_ENVVAR_STRING, "GA_NUM_PROCESSES", [Environment variable used to request processes.])
AC_DEFINE(GA_NUM_THREADS_ENVVAR_STRING, "GA_NUM_THREADS", [Environment variable used to request threads.])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

dnl Initialize libtool with module loading capability.
#AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

#dnl figure debugging default, prior to $ac_help setup
#dnl
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)
#if test `expr $MINOR_VERSION \% 2` = 1 ; then
#	debug_default=yes
#else
#	debug_default=partial
#fi
#AC_DIVERT_POP()
dnl Debugging default.
debug_default=no

dnl declare --enable-* args and collect ac_help strings
AC_ARG_ENABLE(g,
       [  --enable-g=[yes/no]             compile with symbolic debug information. [default=yes]],,
       enable_g=yes)
AC_ARG_ENABLE(debug,
       [  --enable-debug=[no/minimum/yes] turn on debugging. [default=$debug_default]],,
       enable_debug=$debug_default)
AC_ARG_ENABLE(memory_debug,
       [  --enable-memory-debug           turn on memory access debugging. [default=no]],,
       enable_memory_debug=no)
AC_ARG_ENABLE(ansi,
       [  --enable-ansi                   turn on strict ansi. [default=no]],,
       enable_ansi=no)
AC_ARG_ENABLE(missing_prototypes,
       [  --enable-missing-prototypes     turn on missing prototype checks. [default=no]],,
       enable_missing_prototypes=no)
AC_ARG_ENABLE(threads,
       [  --enable-threads                turn on multi-thread support. [default=no]
                          ([=no] will override --with-threads)],,
       enable_threads=no)
AC_ARG_ENABLE(mpi,
       [  --enable-mpi                    turn on MPI support. [default=no]
                          ([=no] will override --with-mpi)],,
       enable_mpi=no)
AC_ARG_ENABLE(pvm,
       [  --enable-pvm                    turn on PVM3 support. [default=no]
                          ([=no] will override --with-pvm)],,
       enable_pvm=no)
AC_ARG_ENABLE(slang,
       [  --enable-slang=[yes/no]         use S-Lang for scripting. [default=yes]],,
       enable_slang=yes)
AC_ARG_ENABLE(prof,
       [  --enable-profile                turn on profiling. [default=no]],,
       enable_prof=no)
AC_ARG_ENABLE(efence,
       [  --enable-efence=[yes/no]        use Electric Fence for memory debugging. [default=no]],,
       enable_efence=no)
AC_ARG_ENABLE(padding,
       [  --enable-padding=[yes/no]       use memory padding for overflow detection. [default=no]],,
       enable_padding=no)
AC_ARG_ENABLE(num_procs,
       [  --enable-num-procs=[INT]        default number of processes to spawn in MP code. [default=16]],,
       enable_num_procs=16)
AC_ARG_ENABLE(num_threads,
       [  --enable-num-threads=[INT]      default number of threads to create in threaded code. [default=4]],,
       enable_num_threads=4)
AC_ARG_ENABLE(w32_subset,
       [  --enable-w32-subset=[yes/no]    compile a subset of GAUL for windows. [default=no]],,
       enable_w32_subset=no)

AC_MSG_CHECKING(for default number of processes to spawn in MP code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_PROCESSES, ${enable_num_procs}, [Default number of processes.])
AC_MSG_RESULT(${enable_num_procs})

AC_MSG_CHECKING(for default number of threads to create in threaded code)
AC_DEFINE_UNQUOTED(GA_DEFAULT_NUM_THREADS, ${enable_num_threads}, [Default number of threads.])
AC_MSG_RESULT(${enable_num_threads})

AC_MSG_CHECKING(for type of parallelisation)
AC_DEFINE(PARALLEL, 0, [type of parallelisation])

if test "x$enable_threads" != "xyes"; then
  enable_threads=no
else
  AC_DEFINE(PARALLEL, 1, [type of parallelisation])
  AC_MSG_RESULT(pthreads)
fi

if test "x$enable_mpi" != "xyes"; then
  enable_mpi=no
else
  AC_DEFINE(PARALLEL, 2, [type of parallelisation])
  AC_MSG_RESULT(MPI)
fi

if test "x$enable_pvm" != "xyes"; then
  enable_pvm=no
else
  AC_DEFINE(PARALLEL, 3, [type of parallelisation])
  AC_MSG_RESULT(PVM3)
fi

if test "x$enable_threads" = "xno"; then
  if test "x$enable_mpi" = "xno"; then
    if test "x$enable_pvm" = "xno"; then
      AC_MSG_RESULT(none)
    fi
  fi
fi

AC_MSG_CHECKING(whether to enable memory access debugging)
if test "x$enable_memory_debug" = "xyes"; then
  AC_DEFINE( MEMORY_ALLOC_DEBUG, 1, [Whether to use debugging memory allocation routines.])
  AC_DEFINE( MEMORY_ALLOC_SAFE, 0, [Whether to use safe memory allocation routines.])

  AC_MSG_RESULT(yes - full profiling)
else
  AC_DEFINE( MEMORY_ALLOC_DEBUG, 0, [Whether to use debugging memory allocation routines.])
  AC_DEFINE( MEMORY_ALLOC_SAFE, 1, [Whether to use safe memory allocation routines.])

  AC_MSG_RESULT(no - safe wrappers only)
fi

AC_MSG_CHECKING(whether to enable dumping of statistics)
if test "x$enable_stats" = "xyes"; then
  AC_DEFINE( GA_WRITE_STATS, 1, [Whether to dump certian statistics.])
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(GA_WRITE_STATS, 0, [Whether to dump certian statistics.])
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable general GAUL debugging)
if test "x$enable_debug" = "xyes"; then
  AC_MSG_RESULT(yes)
  debug=2
else
  if test "x$enable_debug" = "xno"; then
    AC_MSG_RESULT(no)
    debug=0
  else
    AC_MSG_RESULT(partial)
    debug=1
  fi
fi
AC_DEFINE_UNQUOTED( DEBUG, ${debug}, [Overall debugging level.])
AC_DEFINE_UNQUOTED( GA_DEBUG, ${debug}, [Core GAUL debugging level.])

dnl Whether to pad memory to detect overflows
AC_MSG_CHECKING(whether to pad memory to detect overflows)
if test "x$enable_padding" = "xyes"; then
  AC_DEFINE( MEMORY_PADDING, 1, [Whether to pad memory.] )
  AC_MSG_RESULT(yes)
else
  AC_DEFINE( MEMORY_PADDING, 0, [Whether to pad memory.] )
  AC_MSG_RESULT(no)
fi

dnl Setup MPI compilation
AC_MSG_CHECKING(how to compile MPI code)
if test "x$enable_mpi" = "xyes"; then
  MPICC="mpicc"
  MPIFLAGS=""
  AC_MSG_RESULT(mpicc)
else
  MPICC="echo"
  MPIFLAGS="> /dev/null"
  AC_MSG_RESULT(skip)
fi

dnl Whether we need to cripple GAUL so that it works with windows.
dnl This is always the case if MingW is being used.
AC_MSG_CHECKING(whether to cripple GAUL for windows)

case $target in
  *-*-mingw*) enable_w32_subset = "yes" ;;
esac

if test "x$enable_w32_subset" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(W32_CRIPPLED, 1, [Whether to cripple GAUL so it works on windows.])
  AC_MSG_WARN([GAUL is crippled when compiled for windows.  Please consider upgrading to a proper operating system.])
else
  AC_MSG_RESULT(no)
  AC_DEFINE(W32_CRIPPLED, 0, [Whether to cripple GAUL so it works on windows.])
fi

dnl Check for S-Lang.
AC_MSG_CHECKING(whether to link S-Lang scripting engine)
if test "x$enable_slang" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_SLANG, 1, [Whether S-Lang is installed.])
  WILL_USE_SLANG="yes"
  LIBS="$LIBS -lslang"
  AC_CHECK_LIB(slang, SLang_init_slang,
    [LIBS="$LIBS -lslang"],
    [AC_MSG_ERROR(GAUL requires the S-Lang library for full functionality.  see http://space.mit.edu/pub/davis/slang/  Or configure with '--enable-slang=no' for reduced version.)])
else
  AC_MSG_RESULT(no)
  AC_DEFINE(HAVE_SLANG, 0, [Whether S-Lang is installed.])
  WILL_USE_SLANG="no"
fi

#dnl Check for S-Lang.
#AC_MSG_CHECKING(whether to link S-Lang scripting engine)
#if test "x$enable_slang" = "xyes"; then
#  AC_MSG_RESULT(yes)
#  AC_DEFINE(HAVE_SLANG, 1, [Whether S-Lang is installed.])
#  WILL_USE_SLANG="yes"
#  LIBS="$LIBS -lslang"
#  INCLUDES="$INCLUDES -I/usr/include/slang/"
#  CFLAGS="$CFLAGS -I/usr/include/slang/" # FIXME: Kludge!
#  AC_CHECK_LIB(slang, SLang_init_slang,
#    [LIBS="$LIBS -lslang"
#     INCLUDES="$INCLUDES -I/usr/include/slang/"],
#    [AC_MSG_ERROR(GAUL requires the S-Lang library for full functionality.  see http://space.mit.edu/pub/davis/slang/  Or configure with '--enable-slang=no' for reduced version.)])
#else
#  AC_MSG_RESULT(no)
#  AC_DEFINE(HAVE_SLANG, 0, [Whether S-Lang is installed.])
#  WILL_USE_SLANG="no"
#fi

dnl Electric Fence has to be last library linked.
AC_MSG_CHECKING(whether to link Electric Fence for memory debugging)
if test "x$enable_efence" = "xyes"; then
  AC_MSG_RESULT(yes)
  AC_CHECK_LIB(efence, malloc, LIBS="$LIBS -lefence")
else
  AC_MSG_RESULT(no)
fi

dnl Compiler specific switches.
changequote(,)dnl
case $CC in
  gcc)
    # Optimisations etc. for the GNU gcc compiler.
    case " $CFLAGS " in
      *[\ \	]-Wall[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -Wall" ;;
    esac

    if test "x$enable_g" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-g[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -g" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-O2[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O2" ;;
      esac

    else
      case " $CFLAGS " in
        *[\ \	]-O3[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O3" ;;
      esac

    fi

    if test "x$enable_prof" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-pg[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -pg" ;;
      esac
    fi

    if test "x$enable_missing_prototypes" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-Wmissing-prototypes[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Wmissing-prototypes" ;;
      esac
    fi

    if test "x$enable_ansi" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-ansi[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -ansi" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-pedantic[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -pedantic" ;;
      esac
    fi
    ;;

  icc)
# Optimisations etc. for the Intel C++ compiler.

    case " $CFLAGS " in
      *[\ \	]-w1[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -w1" ;;
    esac

    if test "x$enable_g" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-g[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -g" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-O2[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O2" ;;
      esac

    else

      case " $CFLAGS " in
        *[\ \	]-O3[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -O3" ;;
      esac

    fi

    case " $CFLAGS " in
      *[\ \	]-ipo[\ \	]*) ;;
      *) CFLAGS="$CFLAGS -ipo -ipo_obj" ;;
    esac

    if test "x$enable_prof" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-qp[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -qp" ;;
      esac
    fi

    if test "x$enable_ansi" = "xyes"; then
      case " $CFLAGS " in
        *[\ \	]-ansi[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -ansi" ;;
      esac
    fi
    ;;

  ccc)
# Kludges etc. for the Compaq C Compiler

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g3" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-O3[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -O3" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-Wall[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Wall" ;;
      esac

      case " $CFLAGS " in
        *[\ \	]-misalign[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -misalign" ;;
      esac
    ;;

  pgcc)
# The Portland Group C compiler.
# Note: Should consider use of -tp flags to specify processor type.
# I should also consider investigating the pgcc profiling options.

      if test "x$enable_g" = "xyes"; then
        case " $CFLAGS " in
          *[\ \	]-g[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -g" ;;
        esac

      else
        case " $CFLAGS " in
          *[\ \	]-fast[\ \	]*) ;;
          *) CFLAGS="$CFLAGS -fast" ;;
        esac

      fi

      case " $CFLAGS " in
        *[\ \	]-Xa[\ \	]*) ;;
        *) CFLAGS="$CFLAGS -Xa" ;;
      esac
    ;;
  *)
# Could be any compiler!
# Kludges etc. for the Sun C Compiler.
    if test "x$CC" = "xcc"; then
      if test "x$target" = "xsparc-sun-solaris2.8"; then

        if test "x$enable_ansi" = "xyes"; then
          case " $CFLAGS " in
            *[\ \	]-ansi[\ \	]*) ;;
            *) CFLAGS="$CFLAGS -ansi" ;;
          esac
        fi
      fi
    fi
    ;;

esac
changequote([,])dnl

dnl Checks for standard library functions.
AC_FUNC_VPRINTF

dnl Check type sizes.
AC_CHECK_SIZEOF(double, 4)
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(void *, 4)

dnl Stuff.
AC_C_CONST
AC_STRUCT_TM

dnl Get includes setup correctly.
INCLUDES="$INCLUDES -I../util/"
CFLAGS="$CFLAGS -I../util/ -I../src/" # FIXME: Kludge!

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(arpa/inet.h netdb.h netinet/in.h pwd.h sys/ioctl.h \
                 sys/select.h sys/signal.h sys/socket.h sys/termio.h \
                 sys/time.h sys/types.h sys/uio.h sys/wait.h \
                 limits.h values.h termios.h unistd.h fcntl.h)

dnl Check for some library functions, many of which GAUL doesn't use, but I
dnl haven't gone though checking yet.
AC_CHECK_FUNCS(fdopen gethostname getpwuid gettimeofday select \
               atexit on_exit \
               waitpid snooze \
               basename \
               readline \
               memcpy memmove memscan \
               memrev memchr memmem memcmp \
               min max \
               index rindex \
               snprintf \
               strchr strrchr strcat \
               strcmp strcpy strpbrk strsep \
               strcasecmp strncasecmp \
               strdup strndup \
               strnfill strcatv strsignal strrev \
               strspn strcspn \
               strerror strlcat strlcpy strstr vsnprintf)

dnl Some dodgy work-arounds.
dnl Most of this is a bit kludgy.  Proper fixes would be desirable...
case "$target" in
  *-*-mingw*) is_mingw="yes" ;;
  *) is_mingw="no" ;;
esac
if ( test "x$enable_mpi" = "xyes" || test $is_mingw = yes ); then
  # Avoid symbol conflict with LAM-MPI and incorrect detection of itoa() with MingW.
  AC_DEFINE(HAVE_ITOA,1,[Whether itoa() is available])
else
  AC_CHECK_FUNC(itoa)
fi

if test "x$CC" = "xicc"; then
  AC_DEFINE(HAVE_SINCOS,1,[Whether sincos() is available])	# I have some problems with implicit definition of sincos() with the Intel C++.
else
  AC_CHECK_FUNC( sincos )
fi

if test "x$target" = "xsparc-sun-solaris2.7"; then
  AC_DEFINE( SUN_FORTE_C, 2.7, [Define if using Sun's Forte C Compiler] )
  AC_DEFINE(HAVE_BCOPY,1,[Whether bcopy() is available])	# Big problems!!!
  AC_DEFINE(HAVE_BCMP,1,[Whether bcmp() is available])
  AC_DEFINE(HAVE_STRLEN,1,[Whether strlen() is available])
  AC_DEFINE(HAVE_STRNCMP,1,[Whether strncmp() is available])
  AC_DEFINE(HAVE_STRNCPY,1,[Whether strncpy() is available])
  AC_DEFINE(HAVE_STRTOD,1,[Whether strtod() is available])
  AC_DEFINE(HAVE_STRTOK,1,[Whether strtok() is available])
  AC_DEFINE(HAVE_MEMSET,1,[Whether memset() is available])
  AC_DEFINE(HAVE_USLEEP,1,[Whether usleep() is available])
elif test "x$target" = "xsparc-sun-solaris2.8"; then
  AC_DEFINE( SUN_FORTE_C, 2.8, [Define if using Sun's Forte C Compiler] )
  AC_CHECK_FUNCS(bcopy bcmp strlen strncmp strncpy strtod strtok memset usleep)
else
  AC_DEFINE( SUN_FORTE_C, 0, [Define if using Sun's Forte C Compiler] )
  AC_CHECK_FUNCS(bcopy bcmp strlen strncmp strncpy strtod strtok memset usleep)
fi

case "$target" in
  *-*-cygwin*)
# stricmp() and strnicmp() are defined as macros by Cygwin, therefore the
# AC_CHECK_FUNCS tests give incorrect result.
    AC_DEFINE(HAVE_STRICMP,1,[Whether stricmp() is available])
    AC_DEFINE(HAVE_STRNICMP,1,[Whether strnicmp() is available])
    ;;
  *)
    AC_CHECK_FUNCS(stricmp strnicmp)
    ;;
esac

dnl Check whether stdbool.h defines bool and true/false correctly.
AC_CACHE_CHECK([for working stdbool.h],
	   gaul_header_stdbool_h,
	   [AC_TRY_COMPILE([#include <stdbool.h>],
	[bool blah = false;],
	gaul_header_stdbool_h=yes, gaul_header_stdbool_h=no)])
if test $gaul_header_stdbool_h = yes; then
  AC_DEFINE(HAVE_STDBOOL_H, 1, [Define if you have a working <stdbool.h> header file.])
fi

dnl Check whether compiler has built-in _Bool type.
AC_CACHE_CHECK([for built-in _Bool type],
	      gaul__bool,
	     [AC_TRY_COMPILE(,
	     [_Bool blah = (_Bool)0;],
	     gaul__bool=yes, gaul__bool=no)])
if test $gaul__bool = yes; then
  AC_DEFINE(HAVE__BOOL, 1, [Define if compiler has built-in _Bool type.])
fi

dnl Some processor specific stuff.
AC_MSG_CHECKING(whether to apply processor specific optimisations)
case "$target" in
  i586-*-*)
    AC_MSG_RESULT(yes - i586)
    case "$CC" in
      icc)
        case " $CFLAGS " in
          *[\ \	]-tpp[1-9\ \	]*) ;;
	  # -axK
          *) CFLAGS="$CFLAGS -tpp6" ;;
        esac
        ;;
      gcc)
        case " $CFLAGS " in
          *[\ \	]-mcpu=*) ;;
          *) CFLAGS="$CFLAGS -mcpu=pentium" ;;
        esac
        ;;
    esac
    ;;
  i686-*-*)
    AC_MSG_RESULT(yes - i686)
    case "$CC" in
      icc)
        case " $CFLAGS " in
          *[\ \	]-tpp[1-9\ \	]*) ;;
	  # -axW
          *) CFLAGS="$CFLAGS -tpp7" ;;
        esac
        ;;
      gcc)
        case " $CFLAGS " in
          *[\ \	]-mcpu=*) ;;
          *) CFLAGS="$CFLAGS -mcpu=pentiumpro" ;;
        esac
        ;;
    esac
    ;;
  *)
    AC_MSG_RESULT(no - none defined for ${target})
    ;;
esac

dnl Determine memory alignment characteristics.
AC_MSG_CHECKING(memory alignment)
AC_CACHE_VAL(MEMORY_ALIGN_SIZE,
[AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
int main(void)
  {
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", (unsigned int) sizeof(long)>sizeof(void *)?sizeof(long):sizeof(void *));
  exit(0);
  }
], MEM_ALIGN_SIZE=`cat conftestval`, MEM_ALIGN_SIZE=4, MEM_ALIGN_SIZE=8)])
AC_MSG_RESULT(${MEM_ALIGN_SIZE})
AC_DEFINE_UNQUOTED(MEMORY_ALIGN_SIZE, ${MEM_ALIGN_SIZE}, [Memory alignment boundry characteristics.])

dnl Give warning if GNU Make is not being used.
dnl This message is at the bottom so it may be easily spotted!
temp=`make -version -f \dev\null 2>&1 | grep GNU`
if test "x$temp" = "x"; then
  AC_MSG_WARN([You are advised to use GNU Make when compiling GAUL])
fi

AC_OUTPUT(
           Makefile
           util/Makefile
           src/Makefile
           tests/Makefile
           examples/Makefile
         )

echo \
"************************************************************************
  GAUL has been configured successfully.  In summary:

  Version:                    ${VERSION}
  Source code location:       ${srcdir}
  Host system type:           ${host}
  Target system type:         ${target}
  Debugging level:            ${debug}
  C compiler:                 ${CC}
  C compiler flags:           ${CFLAGS}
  Additional include flags:   ${INCLUDE}
  Install path:               ${prefix}
  Use S-Lang:                 ${WILL_USE_SLANG}

************************************************************************"

